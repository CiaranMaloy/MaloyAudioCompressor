A list of the objects that will be used to make up the compressor

======
1. Amplifier 

An amplifier object will apply volume and gain parameters to the signal. 
This is not treated as a gain parameter since any amount of modeling could be included within this stage. 
======
======
2. Level Detector (Signal Envelope Follower)

An object which calculates the current signal level. 
This is expanded on with the addition of attack and release parameters. 
This can also be expanded on with the addition of peak, rms and underdamping to emulate a VU meter. 
======
======
3. Gain Computer

Gain Computer object calculates the amount of gain required to apply to the output signal given the output from the level detector. 
there are a number of curves and smoothing techniques to apply when deciding the gain to apply. 
This computer is genberic enough to be expanded on to create a compressor, limiter or expanded (upwards or downwards), 
depending on the way the gain is computed. 
======

====== Generic Component Layout ====== 
1: .prepare(spec) function
accepts juce::DSP::processSpec object 
or some other parameter object that describes the current
working environment of the plugin. 
processSpec just contains the maximum block size, samplerate and number
of channels the plugin will be dealing with. 

2: .process() function 
can really take in anything, but generally adds the effect to
the current buffer reference - in the case of this being a side chain object, 
this can add some processing to the side chain, i.e RMS level calculation. 

3: .updateParams() function
updates parameters, and accepts anything that's needed. 
Generally is a vodi function that calls from the audioProcessorValueTreeState

4: .update() function
updates anything that isn't a parameter or is internal. 
====== 